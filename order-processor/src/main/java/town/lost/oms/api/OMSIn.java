/*
 * Copyright 2016-2025 chronicle.software
 */

package town.lost.oms.api;

import net.openhft.chronicle.bytes.MethodId;
import town.lost.oms.dto.CancelAll;
import town.lost.oms.dto.CancelOrderRequest;
import town.lost.oms.dto.NewOrderSingle;

/**
 * The {@code OMSIn} interface defines inbound operations for an Order Management System (OMS).
 * <p>
 * In FIX 4.2 terms, these methods handle the logical equivalents of:
 * <ul>
 *   <li><strong>NewOrderSingle (35=D)</strong> - see {@link NewOrderSingle}</li>
 *   <li><strong>OrderCancelRequest (35=F)</strong> - see {@link CancelOrderRequest}</li>
 *   <li>A custom "CancelAll" message (not a standard FIX 4.2 message) - see {@link CancelAll}</li>
 * </ul>
 * The framework typically validates each DTO before calling these methods. On success or failure,
 * an appropriate outbound message (e.g., ExecutionReport, OrderCancelReject) is generated by
 * the OMS implementation.
 */
public interface OMSIn {

    /**
     * Processes a new single-order submission (FIX 4.2 MsgType=35=D).
     *
     * @param nos The {@link NewOrderSingle} representing the details of the new order.
     */
    @MethodId('D')
    void newOrderSingle(NewOrderSingle nos);

    /**
     * Processes a request to cancel a specific order (FIX 4.2 MsgType=35=F).
     *
     * @param cor The {@link CancelOrderRequest} representing the details of the cancel request.
     */
    @MethodId('F')
    void cancelOrderRequest(CancelOrderRequest cor);

    /**
     * Processes a request to cancel all orders for a particular symbol or filter
     * (custom extension beyond FIX 4.2).
     *
     * @param cancelAll The {@link CancelAll} object representing the mass-cancel request.
     */
    void cancelAll(CancelAll cancelAll);
}
