/*
 * Copyright (c) 2016-2024 Chronicle Software Ltd
 */

package town.lost.oms.api;

import net.openhft.chronicle.bytes.MethodId;
import town.lost.oms.dto.CancelAll;
import town.lost.oms.dto.CancelOrderRequest;
import town.lost.oms.dto.NewOrderSingle;

/**
 * The {@code OMSIn} interface defines inbound operations for an Order Management System (OMS).
 * <p>
 * In FIX 4.2 terms, these methods handle the logical equivalents of:
 * <ul>
 *   <li><strong>NewOrderSingle (35=D)</strong> - see {@link NewOrderSingle}</li>
 *   <li><strong>OrderCancelRequest (35=F)</strong> - see {@link CancelOrderRequest}</li>
 *   <li>A custom "CancelAll" message (not a standard FIX 4.2 message) - see {@link CancelAll}</li>
 * </ul>
 * The framework typically validates each DTO before calling these methods. On success or failure,
 * an appropriate outbound message (e.g., ExecutionReport, OrderCancelReject) is generated by
 * the OMS implementation.
 */
public interface OMSIn {

    /**
     * Processes a new single-order submission. Typically leads to an {@code ExecutionReport} on success
     * or an {@code OrderCancelReject} on failure (if the order is invalid).
     *
     * @param nos The {@link NewOrderSingle} representing the details of the new order.
     */
    @MethodId('D')
    void newOrderSingle(NewOrderSingle nos);

    /**
     * Processes a request to cancel a specific existing order. If no matching order is found,
     * the implementation is expected to generate an {@code OrderCancelReject} with a reason like "No such order".
     *
     * @param cor The {@link CancelOrderRequest} object representing the details of the cancel request.
     */
    @MethodId('F')
    void cancelOrderRequest(CancelOrderRequest cor);

    /**
     * Processes a request to cancel all orders matching a specific filter (e.g., by symbol).
     * In a minimal demo scenario, this may reject if no orders exist or simply log the cancellation attempt.
     *
     * @param cancelAll The {@link CancelAll} object representing the details of the mass-cancel request.
     */
    void cancelAll(CancelAll cancelAll);
}
